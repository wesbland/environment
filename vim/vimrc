" General {
    " Turn on Vundle magic
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
    " alternatively, pass a path where Vundle should install bundles
    "let path = '~/some/path/here'
    "call vundle#rc(path)

    " The following are examples of different formats supported.
    " Keep bundle commands between here and filetype plugin indent on.
    " scripts on GitHub repos
    Bundle 'gmarik/Vundle.vim.git'
    Bundle 'kien/ctrlp.vim.git'
    Bundle 'majutsushi/tagbar.git'
    Bundle 'bling/vim-airline.git'
    Bundle 'tpope/vim-fugitive.git'
    Bundle 'mhinz/vim-signify.git'
    " Bundle 'scrooloose/nerdcommenter.git'
    " Bundle 'scrooloose/syntastic.git'
    Bundle 'scrooloose/nerdtree'

    " Colorschemes
    " Bundle 'altercation/vim-colors-solarized.git'
    Bundle 'sickill/vim-monokai.git'

    "" The sparkup vim script is in a subdirectory of this repo called vim.
    "" Pass the path to set the runtimepath properly.
    "Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
    "" scripts from http://vim-scripts.org/vim/scripts.html
    "Bundle 'L9'
    "Bundle 'FuzzyFinder'
    "" scripts not on GitHub
    "Bundle 'git://git.wincent.com/command-t.git'

    filetype plugin indent on     " required
    " To ignore plugin indent changes, instead use:
    "filetype plugin on
    "
    " Brief help
    " :BundleList          - list configured bundles
    " :BundleInstall(!)    - install (update) bundles
    " :BundleSearch(!) foo - search (or refresh cache first) for foo
    " :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles
    "
    " see :h vundle for more details or wiki for FAQ
    " NOTE: comments after Bundle commands are not allowed.
    " Put your stuff after this line

    set mouse=a                     " Enable mouse usage
    set virtualedit=onemore         " Allow cursor to go beyond last character
    set history=1000                " Larger history

    " Set VIM to default to latex for *.tex files
    let g:tex_flavor='latex'

    " Turn on autocomplete magic. Just use <TAB> when in insert mode
    set omnifunc=sytaxcomplete#Complete

    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_smart_case = 1
    let g:neocomplcache_min_syntax_length = 3
    let g:neocomplcache_max_list = 10

    " Enable heavy omni completion.
    if !exists('g:neocomplcache_omni_patterns')
        let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " Turn on gcc checking for syntastic
    let g:syntastic_c_compiler = 'clang'
    let g:syntastic_c_checkers = 'cppcheck'
    let g:syntastic_c_check_header = 1
    let g:syntastic_c_no_include_search = 1
    let g:syntastic_c_no_default_include_dirs = 1
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_c_remove_include_errors = 1
    let g:syntastic_aggregate_errors = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_warning_symbol = '⚠'

    let g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/'
" }

" UI {
    set t_Co=256
    set bg=dark
    colorscheme monokai
    syntax on                       " Syntax highlighting
    set showmode                    " Display the current mode

    " Turn on airline
    set laststatus=2
    let g:airline_powerline_fonts=1 " Turn on powerline fonts for airline
    let g:airline#extensions#whitespace#enabled=0 " Turn of the mixed indent section
    let g:airline#extensions#whitespace#trailing_format='t[%s]' " Shorten the mixed indent section
    let g:airline#extensions#whitespace#mixed_indent_format='m[%s]' " Shorten the mixed indent section
    let g:airline_section_y='' " Turn off the section with the encoding


    set backspace=indent,eol,start  " Better backspace
    set nu                 " Line numbers on
    set showmatch           " Show matching brackets/parenthesis
    set incsearch           " Find as you type search
    set hlsearch            " Highlight search terms
    set winminheight=0      " Windows can be 0 lines 0
    set ignorecase          " Case insensitive search
    set smartcase           " Case sensitive when uc present
    set wildmenu            " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches,
                                    " then longest common part, then all
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap to
    set scrolljump=5        " Lines to scroll when cursor leaves the screen
    set scrolloff=3         " Minimum lines to keep above and below cursor
    set guifont=Menlo\ Regular\ for\ Powerline:h12

    set foldmethod=syntax   " Turn on syntax defined folding
    autocmd BufWinEnter * silent! :%foldopen! " Open all folds by default

    let mysyntaxfile="$HOME/.vim/mysyntax/mpich3.1.vim" " Turn on syntax highlighting for MPI

    set showtabline=2
" }

" Formatting {
    set nowrap              " Wrap long lines
    "set tw=78               " Automatically wrap long lines at 78 characters
    set autoindent          " Indent at the same level as the previous lines
    set shiftwidth=4        " Use indents of 4 spaces
    set expandtab           " Tabs are spaces, not tabs
    set tabstop=8           " Indent every 4 coloms
    set smarttab
    set softtabstop=4       " Let backspace delete indent
    set pastetoggle=<F10>   " Sane indentation on pastes
    set comments=s1:/*,mb:*,elx:*/  " Auto format comment blocks
    set list listchars=tab:\>>      " Show the indent characters so I don't screw up existing formatting

    " Remove trailing whitespace and ^M chars
    " I had to turn this off because it would drive MPICH people crazy
    "autocmd FileType c,cpp,java,php,js,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

    " Highlight trailing whitespace in red
    " Have this highlighting not appear while in insert mode
    " Have the highlighting of whitespace apply when new buffers are opened
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
    highlight ExtraWhitespace ctermbg=red guibg=red
    match ExtraWhitespace /\s\+$/
    autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
    autocmd BufWinLeave * call clearmatches()

    highlight Search ctermbg=black ctermfg=yellow term=underline
" }

" Key Mappings {
    " Make ; work like : for commands
    nnoremap ; :

    " Easier moving in tabs and windows
    map <C-J> <C-W>j<C-W>_
    map <C-K> <C-W>k<C-W>_
    map <C-L> <C-W>l<C-W>_
    map <C-H> <C-W>h<C-W>_

    " Clearing highlighted search
    nmap <silent> <leader>/ :nohlsearch<CR>

    " Change current working directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " Visual shifting (doesn't exit visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " For when you forget to sudo, really write the file
    cmap w!! w !sudo tee % >/dev/null

    " Shortcuts for saving and closing
    map W  :wq<CR>
    map Q  :q<CR>

    " Update and reset the cscope tags
    nmap <leader>c :update_cscope<CR>
        \:cs reset<CR>
    "cs add $CSCOPE_DB

    " Open man pages in splits instead of covering the window
    let $GROFF_NO_SGR=1
    source $VIMRUNTIME/ftplugin/man.vim
    nmap K :Man <cword><CR>

    " Turn on TagBar with \l
    nnoremap <leader>l :TagbarToggle<CR>

    " Recommended neocomplcache key-mappings.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
        " <CR>: close popup and save indent.
        "return neocomplcache#smart_close_popup() . "\<CR>"
        " For no inserting <CR> key.
        return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

    " Mappings for syntastic
    " Jumps to the next error
    nnoremap [n :lnext <CR>
    " Jumps to the previous error
    nnoremap [p :lprev <CR>
    " Opens the full list of errors
    nnoremap <leader>e :Errors <CR>
" }

